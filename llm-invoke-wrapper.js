const I = require('@dieugene/utils');

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ LLM —Å retry –∏ —Å–±–æ—Ä–æ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
 * 
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (this –∏–∑ Dialog –∫–ª–∞—Å—Å–∞)
 * @param {Function} invokeFunction - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ LLM
 * @param {*} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–∑–æ–≤–∞
 * @param {Object} options - –æ–ø—Ü–∏–∏ retry
 * @param {number} options.maxRetries - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
 * @param {number} options.initialDelay - –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000)
 * @param {number} options.backoffMultiplier - –º–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
 * @returns {Promise<*>}
 */
async function safe_llm_invoke(context, invokeFunction, params, options = {}) {
    const {
        maxRetries = 3,
        initialDelay = 1000,
        backoffMultiplier = 2
    } = options;

    const attempts = [];
    let delay = initialDelay;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        const attemptStartTime = Date.now();
        
        try {
            const response = await invokeFunction(params);
            const duration = Date.now() - attemptStartTime;
            
            // –£—Å–ø–µ—Ö - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return response;
            
        } catch (error) {
            const duration = Date.now() - attemptStartTime;
            
            // –ò–∑–º–µ—Ä—è–µ–º –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            const messagesSize = calculateMessagesSize(params.messages || []);
            
            // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–µ
            const attemptInfo = {
                attempt,
                durationMs: duration,
                timestamp: new Date(attemptStartTime).toISOString(),
                messagesCount: params.messages?.length || 0,
                messagesSize: messagesSize,
                errorType: error.constructor.name,
                errorMessage: error.message,
                errorCode: error.code,
                errorStatus: error.status,
                // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
                isTimeout: isTimeoutError(error),
                isNetwork: isNetworkError(error),
                isConnection: isConnectionError(error),
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –æ—à–∏–±–∫–∏
                responseStatus: error.response?.status,
                responseStatusText: error.response?.statusText,
                responseData: error.response?.data ? 
                    (typeof error.response.data === 'string' ? 
                        error.response.data.substring(0, 200) : 
                        JSON.stringify(error.response.data).substring(0, 200)
                    ) : undefined,
                // –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Å—Ç–µ–∫ (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫)
                stackPreview: error.stack?.split('\n').slice(0, 5).join('\n')
            };
            
            attempts.push(attemptInfo);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
            if (attempt === maxRetries) {
                const totalDuration = attempts.reduce((sum, a) => sum + a.durationMs, 0);
                
                const detailedError = new Error(
                    `‚ùå LLM INVOKE FAILED after ${maxRetries} attempts\n` +
                    `Session: ${context.session_id}\n` +
                    `Dialog: ${context.dialog_code} (${context.alias})\n` +
                    `Total duration: ${totalDuration}ms\n` +
                    `Messages: ${messagesSize.totalChars} chars (${messagesSize.humanReadable}), ${params.messages?.length || 0} messages\n` +
                    `\nüìä DIAGNOSTIC INFO (send to developers):\n` +
                    JSON.stringify({
                        session_id: context.session_id,
                        dialog_code: context.dialog_code,
                        alias: context.alias,
                        totalDurationMs: totalDuration,
                        messagesStats: messagesSize,
                        attempts: attempts,
                        lastError: {
                            message: error.message,
                            code: error.code,
                            status: error.status,
                            stack: error.stack
                        },
                        environment: {
                            proxyUrl: process.env.PROXY_URL ? 'configured' : 'not configured',
                            nodeVersion: process.version,
                            platform: process.platform
                        }
                    }, null, 2)
                );
                
                detailedError.diagnosticInfo = { 
                    attempts, 
                    originalError: error,
                    messagesStats: messagesSize
                };
                
                // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                console.error('\n' + '='.repeat(80));
                console.error(detailedError.message);
                console.error('='.repeat(80) + '\n');
                
                throw detailedError;
            }
            
            // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            console.warn(`‚ö†Ô∏è LLM invoke attempt ${attempt} failed (${duration}ms): ${error.message}. Retrying in ${delay}ms...`);
            await I.timeout(delay);
            delay = Math.min(delay * backoffMultiplier, 10000);
        }
    }
}

/**
 * –ü–æ–¥—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
 * @param {Array} messages - –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @returns {Object} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É
 */
function calculateMessagesSize(messages = []) {
    let totalChars = 0;
    const breakdown = {};
    
    messages.forEach(msg => {
        try {
            const type = msg._getType ? msg._getType() : (msg.type || 'unknown');
            const content = msg.content || '';
            const contentLength = typeof content === 'string' ? 
                content.length : 
                JSON.stringify(content).length;
            
            totalChars += contentLength;
            breakdown[type] = (breakdown[type] || 0) + contentLength;
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ
        }
    });
    
    return {
        totalChars,
        humanReadable: formatBytes(totalChars),
        messagesCount: messages.length,
        breakdown
    };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param {number} chars - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
 * @returns {string}
 */
function formatBytes(chars) {
    if (chars < 1024) return chars + ' chars';
    if (chars < 1024 * 1024) return (chars / 1024).toFixed(2) + ' KB';
    return (chars / (1024 * 1024)).toFixed(2) + ' MB';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ timeout –æ—à–∏–±–∫–∏
 */
function isTimeoutError(error) {
    return error.code === 'ETIMEDOUT' || 
           error.code === 'ESOCKETTIMEDOUT' ||
           error.message?.toLowerCase().includes('timeout') ||
           error.name === 'TimeoutError';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
 */
function isNetworkError(error) {
    return error.code === 'ECONNREFUSED' ||
           error.code === 'ENOTFOUND' ||
           error.code === 'ECONNRESET' ||
           error.code === 'EPIPE' ||
           error.message?.toLowerCase().includes('network');
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
function isConnectionError(error) {
    return error.message?.toLowerCase().includes('connection') ||
           error.code === 'ECONNABORTED' ||
           isNetworkError(error);
}

module.exports = {
    safe_llm_invoke,
    calculateMessagesSize,
    isTimeoutError,
    isNetworkError,
    isConnectionError
};
